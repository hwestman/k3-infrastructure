---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 41.6.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  # dependsOn:
  #   - name: rook-ceph-cluster
  #     namespace: rook-ceph
  values:
    alertmanager:
      enabled: false

    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: false
    kubeControllerManager:
      enabled: false
      endpoints:
        - 192.168.1.213
        - 192.168.1.214
        - 192.168.1.215
    kubeScheduler:
      enabled: false
      endpoints:
        - 192.168.1.213
        - 192.168.1.214
        - 192.168.1.215
    kubeProxy:
      enabled: false
      endpoints:
        - 192.168.1.213
        - 192.168.1.214
        - 192.168.1.215
    kubeEtcd:
      enabled: false
      endpoints:
        - 192.168.1.213
        - 192.168.1.214
        - 192.168.1.215
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - &host "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      thanosIngress:
        enabled: false
        pathType: Prefix
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
        hosts:
          - &host "thanos-sidecar.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
      prometheusSpec:
        replicas: 0
        replicaExternalLabelName: __replica__
        externalLabels:
          cluster: j-burg11-2
        # thanos:
        #   image: quay.io/thanos/thanos:v0.28.1
        #   # renovate: datasource=docker depName=quay.io/thanos/thanos
        #   version: "v0.28.1"
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 60d
        retentionSize: 45GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              #volumeName: "prometheus"
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 40Gi
        resources:
          requests:
            cpu: 10m
            memory: 2000Mi
          limits:
            memory: 8000Mi
        additionalScrapeConfigs:
          - job_name: 'node-garagepi'
            static_configs:
              - targets: ['192.168.1.103:9100']

          # - job_name: 'node-bingpi'
          #   static_configs:
          #     - targets: ['192.168.1.43:9100']

          # - job_name: 'node-zigbeepi'
          #   static_configs:
          #     - targets: ['192.168.1.56:9100']

          # - job_name: 'node-zwavepi'
          #   static_configs:
          #     - targets: ['192.168.1.157:9100']

          - job_name: 'hass'
            scrape_interval: 60s
            metrics_path: /api/prometheus
            bearer_token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI5Y2NhYTU5MDkwYzQ0ZWU4YTZlNjViN2IwZjViZGNjMiIsImlhdCI6MTU4Mjk3OTE5MSwiZXhwIjoxODk4MzM5MTkxfQ.MHC03LCvb46UaAf1Xf4NksLm2lJtEqoWstCx-YpK1jg'
            # scheme: https
            static_configs:
              - targets: ['ha.j-burg11.dev']

          - job_name: 'edgerouter-snmp'
            static_configs:
              - targets:
                  - 192.168.1.1  # SNMP device.
            metrics_path: /snmp
            params:
              module: [edgemax]
            relabel_configs:
              - source_labels: [__address__]
                target_label: __param_target
              - source_labels: [__param_target]
                target_label: instance
              - target_label: __address__
                replacement: snmp-exporter.monitoring:9116  # The SNMP exporter's real hostname:port.
          - job_name: 'speedtest-exporter'
            scrape_interval: 1h
            scrape_timeout: 1m
            static_configs:
              - targets: ['speedtest-exporter.monitoring:9798']

          - job_name: 'unifi-exporter'
            scrape_interval: 60s
            static_configs:
              - targets: ['unifi-exporter.monitoring:9130']
          # - job_name: coredns
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "opnsense.${SECRET_PRIVATE_DOMAIN}:9153"
          # - job_name: frr-exporter
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "opnsense.${SECRET_PRIVATE_DOMAIN}:9342"
          # - job_name: node-exporter
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "opnsense.${SECRET_PRIVATE_DOMAIN}:9100"
          #         - "expanse.${SECRET_PRIVATE_DOMAIN}:9100"
          # - job_name: pikvm
          #   scrape_interval: 1m
          #   scrape_timeout: 10s
          #   metrics_path: /api/export/prometheus/metrics
          #   basic_auth:
          #     username: "${SECRET_PIKVM_USERNAME}"
          #     password: "${SECRET_PIKVM_PASSWORD}"
          #   honor_timestamps: true
          #   static_configs:
          #     - targets:
          #         - "pikvm.${SECRET_PRIVATE_DOMAIN}"
